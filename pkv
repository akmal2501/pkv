#! /bin/sh

umask 077

pkv_home="$HOME/.pkv"
gnupg_cmd="$(which gpg) --homedir $pkv_home/gpg"
dmenu_cmd="$(which dmenu) -i -l 10 -nb #440000"

# Generates a new hmac_key. Take care to extract the mapping of the previous key
# beforehand
gen_new_hmac_key () {
	dd bs=64 count=1 if=/dev/random 2>/dev/null |
		base64 -w 0 |
		$gnupg_cmd -e -a >"$pkv_home/hmac_key.gpg"
}

get_value () {
	local keylist="$(</dev/null $gnupg_cmd -d "$pkv_home/keylist")"
	local hmackey="$(</dev/null $gnupg_cmd -d "$pkv_home/hmac_key.gpg")"
	local fname="$(
		</dev/null $gnupg_cmd -d "$pkv_home/keylist" |
		$dmenu_cmd -p "Select Key:" |
		openssl sha512 -hex -hmac "$hmackey" |
		cut -d' ' -f2)"

	</dev/null $gnupg_cmd -d "$pkv_home/keys/$fname"
}

edit_value () {
	local keylist="$(</dev/null $gnupg_cmd -d "$pkv_home/keylist")"
	local hmackey="$(</dev/null $gnupg_cmd -d "$pkv_home/hmac_key.gpg")"
	local key="$(echo "$keylist" |
		$dmenu_cmd -p "Select Key:")"
	local fname="$(echo "$key" |
		openssl sha512 -hex -hmac "$hmackey" |
		cut -d' ' -f2)"
	local oldval="$(</dev/null $gnupg_cmd -d "$pkv_home/keys/$fname")"

	local newval="$(echo "$oldval" |
		$dmenu_cmd -p "New Value:")"
	echo "$newval" |
		$gnupg_cmd 2>/dev/null -e -a >"$pkv_home/keys/$fname"

	# insert new key to /keylist
	echo -e -n "$key\n$keylist" |
		sort -u |
		$gnupg_cmd 2>/dev/null -e -a >"$pkv_home/keylist"
}

# add the key to gpg-agent's cache to avoid issues in the following pipelines
# this unfortunately is racy, because the cache could be invalidated right after
# the following command. $gnupg_cmd should only be called once per pipeline.
</dev/null &>/dev/null $gnupg_cmd -d "$pkv_home/keylist"

case $1 in
	"edit")
		edit_value
		;;
	"get")
		get_value
		;;
	*)
		echo fail
		exit 1
		;;
esac

#gen_new_hmac_key
#edit_value
