#! /bin/sh

umask 077

pkv_home="$HOME/.pkv"
gnupg_cmd="$(which gpg) --homedir $pkv_home/gpg"
dmenu_cmd="$(which dmenu) -i -l 10 -nb #440000"

# Generates a new hmac_key and move all values accordingly.
# ATTENTION: This does not yet reencrypt the values so passive watchers can
# correlate old and new filenames by comparing the contents of the files.
gen_new_hmac_key () {
	local oldhmac="$(</dev/null 2>/dev/null $gnupg_cmd -d "$pkv_home/hmac_key.gpg")"
	local newhmac="$(dd bs=64 count=1 if=/dev/random 2>/dev/null |
		base64 -w 0)"

	# save new hmac key to temporary file in case something breaks in the loop
	echo -n "$newhmac" | $gnupg_cmd -e -a >"$pkv_home/hmac_key.gpg.new"

	</dev/null 2>/dev/null $gnupg_cmd -d "$pkv_home/keylist" | while read key
	do
		local oldf="$(echo -n "$key" |
			openssl sha512 -hex -hmac "$oldhmac" |
			cut -d' ' -f2)"

		local newf="$(echo -n "$key" |
			openssl sha512 -hex -hmac "$newhmac" |
			cut -d' ' -f2)"

		mv "$pkv_home/keys/$oldf" "$pkv_home/keys/$newf"
	done

	# we're done migrating, overwrite the old hmac key file with the new one.
	mv "$pkv_home/hmac_key.gpg.new" "$pkv_home/hmac_key.gpg"
}

# retrive a value and interpret it as a "username password" pair. The first ' '
# separates the two tokens, so "hi  there world" would have "hi" as username and
# " there world" as password. The username is copied to the primary
# selection for 3 seconds, then the password is copied to the primary selection
# for 3 seconds, then the primary selection is cleared.
get_value () {
	local hmackey="$(</dev/null 2>/dev/null $gnupg_cmd -d "$pkv_home/hmac_key.gpg")"

	local key
	key="$(</dev/null $gnupg_cmd -d "$pkv_home/keylist" |
		$dmenu_cmd -p "Select Key:")"
	if [ "$?" = "1" ]; then
		exit 1;
	fi

	local fname="$(echo -n "$key" |
		openssl sha512 -hex -hmac "$hmackey" |
		cut -d' ' -f2)"

	local val="$(</dev/null 2>/dev/null $gnupg_cmd -d "$pkv_home/keys/$fname")"
	local uname="${val%% *}"
	local passw="${val#* }"
	echo -n "$uname" | xclip
	sleep 3s
	echo -n "$passw" | xclip
	sleep 3s
	echo -n "" | xclip
}

# edit a key value pair in the storage. You can do one of:
# - add a new key: just enter a nonexistent key and assign a value to it.
# - edit an existing key: select the existing key and change the value.
# - remove an existing key: select the existing key and enter a value of ""
#   (shift+return in dmenu)
edit_value () {
	local hmackey="$(</dev/null 2>/dev/null $gnupg_cmd -d "$pkv_home/hmac_key.gpg")"
	local keylist="$(</dev/null 2>/dev/null $gnupg_cmd -d "$pkv_home/keylist")"

	local key
	key="$(echo -n "$keylist" |
		$dmenu_cmd -p "Select Key:")"
	if [ "$?" = "1" ]; then
		exit 1
	fi

	local fname="$(echo -n "$key" |
		openssl sha512 -hex -hmac "$hmackey" |
		cut -d' ' -f2)"
	local oldval="$(</dev/null 2>/dev/null $gnupg_cmd -d "$pkv_home/keys/$fname")"

	local newval
	newval="$(echo -n "$oldval" |
		$dmenu_cmd -p "New Value:")"
	if [ "$?" = "1" ]; then
		exit 1
	fi

	if [ -z "$newval" ]; then
		&>/dev/null rm "$pkv_home/keys/$fname"

		# remove key from keylist
		echo -n "$keylist" |
			sort -u |
			grep -v -F -x -e "$key" |
			$gnupg_cmd 2>/dev/null -e -a >"$pkv_home/keylist"
	else
		echo -n "$newval" |
			$gnupg_cmd 2>/dev/null -e -a >"$pkv_home/keys/$fname"

		# insert new key to /keylist
		(echo "$key"; echo -n "$keylist") |
			sort -u |
			$gnupg_cmd 2>/dev/null -e -a >"$pkv_home/keylist"
	fi
}

move_key () {
	local hmackey="$(</dev/null 2>/dev/null $gnupg_cmd -d "$pkv_home/hmac_key.gpg")"
	local keylist="$(</dev/null 2>/dev/null $gnupg_cmd -d "$pkv_home/keylist")"

	local oldkey
	oldkey="$(echo -n "$keylist" |
		$dmenu_cmd -p "Select Key:")"
	if [ "$?" = "1" ]; then
		exit 1
	fi

	local newkey
	newkey="$(echo -n "$keylist" |
		$dmenu_cmd -p "Move \"${oldkey}\" to Key:")"
	if [ "$?" = "1" ]; then
		exit 1
	fi

	local oldname="$(echo -n "$oldkey" |
		openssl sha512 -hex -hmac "$hmackey" |
		cut -d' ' -f2)"

	local newname="$(echo -n "$newkey" |
		openssl sha512 -hex -hmac "$hmackey" |
		cut -d' ' -f2)"

	&>/dev/null cp "$pkv_home/keys/$oldname" "$pkv_home/keys/$newname" || (echo "Could not copy value file"; exit 1)

	# remove oldkey from keylist
	(echo "$newkey"; echo -n "$keylist" |
		sort -u |
		grep -v -F -x -e "$oldkey") |
		sort -u |
		$gnupg_cmd 2>/dev/null -e -a >"$pkv_home/keylist"

	&>/dev/null rm "$pkv_home/keys/$oldname"
}

# generate a new password value
gen_new_pw_value () {
	local hmackey="$(</dev/null 2>/dev/null $gnupg_cmd -d "$pkv_home/hmac_key.gpg")"
	local keylist="$(</dev/null 2>/dev/null $gnupg_cmd -d "$pkv_home/keylist")"

	local key
	key="$(echo -n "$keylist" |
		$dmenu_cmd -p "Select Key:")"
	if [ "$?" = "1" ]; then
		exit 1
	fi

	local fname="$(echo -n "$key" |
		openssl sha512 -hex -hmac "$hmackey" |
		cut -d' ' -f2)"

	# generate new random password string of length 40
	dd bs=30 count=1 if=/dev/random 2>/dev/null |
		base64 -w 0 |
		$gnupg_cmd 2>/dev/null -e -a >"$pkv_home/keys/$fname"

	# insert new key to /keylist
	(echo "$key"; echo -n "$keylist") |
		sort -u |
		$gnupg_cmd 2>/dev/null -e -a >"$pkv_home/keylist"
}


# add the key to gpg-agent's cache to avoid issues in the following pipelines
# this unfortunately is racy, because the cache could be invalidated right after
# the following command. $gnupg_cmd should only be called once per pipeline.
</dev/null &>/dev/null $gnupg_cmd -d "$pkv_home/keylist"

case $1 in
	"get")
		get_value
		;;
	"edit")
		edit_value
		;;
	"move")
		move_key
		;;
	"genpw")
		gen_new_pw_value
		;;
	"rekey2")
		gen_new_hmac_key
		;;
	*)
		echo fail >&2
		exit 1
		;;
esac

#gen_new_hmac_key
#edit_value
